[tool.poetry]
name = "pdf_extract"
version = "0.1.0"
description = ""
authors = ["aibakeneko <aibakeneko@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.10"
appdirs = "^1.4.4"
argh = "^0.26.2"
JPype1 = "^1.4.0"
loguru = "^0.6.0"
pdf2image = "^1.16.0"
pdfplumber = "^0.7.1"
pytesseract = "^0.3.9"
python-pdfbox = "^0.1.8"
tqdm = "^4.64.0"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
isort = "^5.10.1"
mypy = "^1.0.0"
pylint = "^2.15.3"
pytest = "^7.1.3"
pytest-cov = "^4.0.0"
types-setuptools = "^67.1.0.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py310"]
exclude = '''
(
  \.git
  | \.pypy_cache
  | \.pytest_cache
  | \.mypy_cache
  | deprecated
)
'''

[tool.isort]
profile = "black"
line_length = 120
py_version = "auto"
float_to_top = true
src_paths = [ "pdf_extract", "scripts", "tests" ]

[tool.pylint.main]
exit-zero = true
fail-under = 10
# ignore = ["CVS"]
ignore-paths = "deprecated"
ignore-patterns = ["^\\.#"]

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook =

jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.10"
suggestion-mode = true

[tool.pylint.design]
max-args = 8
max-attributes = 14

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
expected-line-ending-format = "LF"
max-line-length = 120

[tool.pylint.imports]
# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =


[tool.pylint.logging]
logging-format-style = "old"

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# duplicate-code
disable = [
    "duplicate-code", # FIXME: temporary
    "invalid-name",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "line-too-long",
    # "no-self-use",
    "pointless-string-statement",
    "global-statement",
    "c-extension-no-member",
    "too-few-public-methods",
    "logging-format-interpolation",
    "logging-fstring-interpolation",
    "consider-using-enumerate",
    "unnecessary-comprehension",
    # "misplaced-comparison-constant",
    "too-many-branches",
    "too-many-locals",
    "wrong-import-order",
    "wrong-spelling-in-comment",
    "wrong-spelling-in-docstring"
]

[tool.pylint.miscellaneous]
# notes = ["FIXME", "XXX", "TODO"]
notes = ""

[tool.pylint.refactoring]
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
output-format = "colorized"
# reports = true
score = false


[tool.pytest.ini_options]
log_cli = "False"
testpaths = [
    "tests",
]
python_files = "*_test.py"
python_functions = "test_*"
markers = [
    "java: marks tests as java dependent (deselect with '-m \"not java\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]

[tool.coverage.run]
branch = true
omit = [
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true
sort = "Name"

[tool.mypy]
python_version = "3.10"
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
show_column_numbers = true
pretty = false
# strict_optional = false
# warn_no_return = false

[[tool.mypy.overrides]]
module = 'tests.*'
disallow_untyped_defs = false